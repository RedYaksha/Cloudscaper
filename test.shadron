
#include <median>

glsl struct GlyphVertex {
    vec2 coord;
    vec2 texCoord;
};

template <TEXT_SIZE>
glsl vec4 projectVertex(out vec2 texCoord, in GlyphVertex vertex) {
    vec2 coord = vertex.coord;
    float scale = 2.0/max((TEXT_SIZE).x, shadron_Aspect*(TEXT_SIZE).y);
    scale *= exp(0.0625*shadron_Mouse.z);
    coord += vec2(-0.5, 0.5)*vec2(TEXT_SIZE);
    coord *= scale*vec2(1.0, shadron_Aspect);
    texCoord = vertex.texCoord;
    return vec4(coord, 0.0, 1.0);
}

template <ATLAS, RANGE, ZERO_DIST, COLOR>
glsl vec4 fillGlyph(vec2 texCoord) {
    vec3 s = texture((ATLAS), texCoord).rgb;
    float sd = dot(vec2(RANGE), 0.5/fwidth(texCoord))*(median(s.r, s.g, s.b)-ZERO_DIST);
    float fill = clamp(sd+0.5, 0.0, 1.0);
    return vec4(vec3(COLOR), fill);
}

#define PREVIEW_IMAGE(NAME, ATLAS, RANGE, ZERO_DIST, COLOR, VERTEX_LIST, TEXT_SIZE, DIMENSIONS) model image NAME : \
    vertex_data(GlyphVertex), \
    fragment_data(vec2), \
    vertex(projectVertex<TEXT_SIZE>, triangles, VERTEX_LIST), \
    fragment(fillGlyph<ATLAS, RANGE, ZERO_DIST, COLOR>), \
    depth(false), \
    blend(transparency), \
    background(vec4(vec3(COLOR), 0.0)), \
    dimensions(DIMENSIONS), \
    resizable(true)

image Atlas = file("sdf_atlas_montserrat_regular.png") : filter(linear), map(repeat);
const vec2 txRange = vec2(0.0078125, 0.0078125);
const float zeroDistanceValue = 0.5;

vertex_list GlyphVertex textQuadVertices = {
    -0.0179901625, -0.82577215, 0.400390625, 0.271484375, 0.488867931, -0.82577215, 0.494140625, 0.271484375, -0.0179901625, -0.192199533, 0.400390625, 0.388671875, 0.488867931, -0.192199533, 0.494140625, 0.388671875, -0.0179901625, -0.192199533, 0.400390625, 0.388671875, 0.488867931, -0.82577215, 0.494140625, 0.271484375,
    0.486311862, -0.82577215, 0.591796875, 0.076171875, 0.950931781, -0.82577215, 0.677734375, 0.076171875, 0.486311862, -0.318914057, 0.591796875, 0.169921875, 0.950931781, -0.318914057, 0.677734375, 0.169921875, 0.486311862, -0.318914057, 0.591796875, 0.169921875, 0.950931781, -0.82577215, 0.677734375, 0.076171875,
    0.963847753, -0.82577215, 0.775390625, 0.474609375, 1.36511041, -0.82577215, 0.849609375, 0.474609375, 0.963847753, -0.318914057, 0.775390625, 0.568359375, 1.36511041, -0.318914057, 0.849609375, 0.568359375, 0.963847753, -0.318914057, 0.775390625, 0.568359375, 1.36511041, -0.82577215, 0.849609375, 0.474609375,
    1.35893902, -0.82577215, 0.775390625, 0.001953125, 1.69684441, -0.82577215, 0.837890625, 0.001953125, 1.35893902, -0.234437708, 0.775390625, 0.111328125, 1.69684441, -0.234437708, 0.837890625, 0.111328125, 1.35893902, -0.234437708, 0.775390625, 0.111328125, 1.69684441, -0.82577215, 0.837890625, 0.001953125,
    1.90692917, -0.82577215, 0.775390625, 0.001953125, 2.24483457, -0.82577215, 0.837890625, 0.001953125, 1.90692917, -0.234437708, 0.775390625, 0.111328125, 2.24483457, -0.234437708, 0.837890625, 0.111328125, 1.90692917, -0.234437708, 0.775390625, 0.111328125, 2.24483457, -0.82577215, 0.837890625, 0.001953125,
    2.26317815, -0.82577215, 0.591796875, 0.076171875, 2.72779806, -0.82577215, 0.677734375, 0.076171875, 2.26317815, -0.318914057, 0.591796875, 0.169921875, 2.72779806, -0.318914057, 0.677734375, 0.169921875, 2.26317815, -0.318914057, 0.591796875, 0.169921875, 2.72779806, -0.82577215, 0.677734375, 0.076171875,
    2.72995419, -0.82577215, 0.591796875, 0.173828125, 3.19457411, -0.82577215, 0.677734375, 0.173828125, 2.72995419, -0.340033144, 0.591796875, 0.263671875, 3.19457411, -0.340033144, 0.677734375, 0.263671875, 2.72995419, -0.340033144, 0.591796875, 0.263671875, 3.19457411, -0.82577215, 0.677734375, 0.173828125,
    3.17354115, -0.82577215, 0.775390625, 0.001953125, 3.51144655, -0.82577215, 0.837890625, 0.001953125, 3.17354115, -0.234437708, 0.775390625, 0.111328125, 3.51144655, -0.234437708, 0.837890625, 0.111328125, 3.17354115, -0.234437708, 0.775390625, 0.111328125, 3.51144655, -0.82577215, 0.837890625, 0.001953125,
};
const vec2 textSize = vec2(3.51435603, 1);

PREVIEW_IMAGE(Preview, Atlas, txRange, zeroDistanceValue, vec3(1.0), textQuadVertices, textSize, ivec2(1200, 400));
export png(Preview, "preview.png");
